import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.TextIO;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;
import org.apache.beam.sdk.values.PCollectionTuple;
import org.apache.beam.sdk.values.TupleTag;
import org.apache.beam.sdk.values.TupleTagList;

public class ResilientPipeline {

    // Define tuple tags for main and error outputs
    static final TupleTag<String> MAIN_OUTPUT = new TupleTag<>("mainOutput");
    static final TupleTag<String> ERROR_OUTPUT = new TupleTag<>("errorOutput");

    public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).create();
        Pipeline pipeline = Pipeline.create(options);

        // Example: Read from a file and process with error handling
        PCollection<String> input = pipeline.apply(TextIO.read().from("input.txt"));

        PCollectionTuple results = input.apply(ParDo.of(new ErrorHandlingDoFn())
            .withOutputTags(MAIN_OUTPUT, TupleTagList.of(ERROR_OUTPUT)));

        // Write successful outputs
        results.get(MAIN_OUTPUT).apply(TextIO.write().to("success.txt"));

        // Write errors to a dead-letter file (or sink like Kafka for retry)
        results.get(ERROR_OUTPUT).apply(TextIO.write().to("errors.txt"));

        pipeline.run().waitUntilFinish();
    }

    static class ErrorHandlingDoFn extends DoFn<String, String> {
        @ProcessElement
        public void processElement(ProcessContext c) {
            String element = c.element();
            try {
                // Your processing logic that might throw exceptions
                if (element.contains("bad_data")) {
                    throw new RuntimeException("Simulated exception");
                }
                // Successful processing
                c.output(MAIN_OUTPUT, "Processed: " + element);
            } catch (Exception e) {
                // Handle the exception: log and output to error tag
                System.err.println("Error processing: " + element + " - " + e.getMessage());
                c.output(ERROR_OUTPUT, "Error: " + element + " - " + e.getMessage());
            }
        }
    }
}
