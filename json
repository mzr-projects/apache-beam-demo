import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Utility class for searching values in complex JSON structures
 */
public class JsonSearchUtility {
    
    private final ObjectMapper objectMapper;
    
    public JsonSearchUtility() {
        this.objectMapper = new ObjectMapper();
    }
    
    /**
     * Search for a specific value in JSON and return all paths where it's found
     * 
     * @param jsonString The JSON string to search in
     * @param searchValue The value to search for
     * @return List of paths where the value was found
     */
    public List<String> searchValue(String jsonString, Object searchValue) throws Exception {
        JsonNode rootNode = objectMapper.readTree(jsonString);
        List<String> results = new ArrayList<>();
        searchRecursive(rootNode, searchValue, "", results);
        return results;
    }
    
    /**
     * Recursive method to traverse JSON structure
     */
    private void searchRecursive(JsonNode node, Object searchValue, String currentPath, List<String> results) {
        if (node.isObject()) {
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                String fieldName = field.getKey();
                JsonNode fieldValue = field.getValue();
                String newPath = currentPath.isEmpty() ? fieldName : currentPath + "." + fieldName;
                
                if (matchesValue(fieldValue, searchValue)) {
                    results.add(newPath);
                }
                
                searchRecursive(fieldValue, searchValue, newPath, results);
            }
        } else if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                JsonNode arrayElement = node.get(i);
                String newPath = currentPath + "[" + i + "]";
                
                if (matchesValue(arrayElement, searchValue)) {
                    results.add(newPath);
                }
                
                searchRecursive(arrayElement, searchValue, newPath, results);
            }
        }
    }
    
    /**
     * Check if a JSON node matches the search value
     */
    private boolean matchesValue(JsonNode node, Object searchValue) {
        if (searchValue == null) {
            return node.isNull();
        }
        
        if (searchValue instanceof String) {
            return node.isTextual() && node.asText().equals(searchValue);
        } else if (searchValue instanceof Integer) {
            return node.isInt() && node.asInt() == (Integer) searchValue;
        } else if (searchValue instanceof Long) {
            return node.isLong() && node.asLong() == (Long) searchValue;
        } else if (searchValue instanceof Double) {
            return node.isDouble() && node.asDouble() == (Double) searchValue;
        } else if (searchValue instanceof Boolean) {
            return node.isBoolean() && node.asBoolean() == (Boolean) searchValue;
        }
        
        return false;
    }
    
    /**
     * Search by key name in JSON
     */
    public List<String> searchByKey(String jsonString, String keyName) throws Exception {
        JsonNode rootNode = objectMapper.readTree(jsonString);
        List<String> results = new ArrayList<>();
        searchKeyRecursive(rootNode, keyName, "", results);
        return results;
    }
    
    private void searchKeyRecursive(JsonNode node, String keyName, String currentPath, List<String> results) {
        if (node.isObject()) {
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                String fieldName = field.getKey();
                JsonNode fieldValue = field.getValue();
                String newPath = currentPath.isEmpty() ? fieldName : currentPath + "." + fieldName;
                
                if (fieldName.equals(keyName)) {
                    results.add(newPath + " = " + fieldValue.toString());
                }
                
                searchKeyRecursive(fieldValue, keyName, newPath, results);
            }
        } else if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                JsonNode arrayElement = node.get(i);
                String newPath = currentPath + "[" + i + "]";
                searchKeyRecursive(arrayElement, keyName, newPath, results);
            }
        }
    }
    
    /**
     * Main method with example usage
     */
    public static void main(String[] args) {
        try {
            JsonSearchUtility searcher = new JsonSearchUtility();
            
            // Example JSON with nested objects and arrays
            String json = """
                {
                    "name": "John Doe",
                    "age": 30,
                    "city": "New York",
                    "hobbies": ["reading", "gaming", "cooking"],
                    "address": {
                        "street": "123 Main St",
                        "city": "New York",
                        "zipcode": "10001"
                    },
                    "friends": [
                        {
                            "name": "Jane Smith",
                            "age": 28,
                            "city": "Boston"
                        },
                        {
                            "name": "Bob Johnson",
                            "age": 30,
                            "city": "Chicago"
                        }
                    ]
                }
                """;
            
            System.out.println("=== Search for value: 'New York' ===");
            List<String> valueResults = searcher.searchValue(json, "New York");
            valueResults.forEach(path -> System.out.println("Found at: " + path));
            
            System.out.println("\n=== Search for value: 30 ===");
            List<String> ageResults = searcher.searchValue(json, 30);
            ageResults.forEach(path -> System.out.println("Found at: " + path));
            
            System.out.println("\n=== Search for key: 'city' ===");
            List<String> keyResults = searcher.searchByKey(json, "city");
            keyResults.forEach(result -> System.out.println(result));
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

public class IndexFieldSearcher {
    
    private final ObjectMapper objectMapper = new ObjectMapper();
    
    /**
     * Searches for a field by name and returns the index name
     * @param jsonString The JSON string to search in
     * @param fieldName The field name to search for
     * @return The index name if found, null otherwise
     */
    public String findIndexByFieldName(String jsonString, String fieldName) {
        try {
            JsonNode root = objectMapper.readTree(jsonString);
            JsonNode source = root.get("source");
            
            if (source == null) return null;
            
            // Iterate through all index names in source
            Iterator<String> indexNames = source.fieldNames();
            while (indexNames.hasNext()) {
                String indexName = indexNames.next();
                JsonNode indexData = source.get(indexName);
                JsonNode fields = indexData.get("fields");
                
                if (fields != null && fields.isArray()) {
                    for (JsonNode field : fields) {
                        String name = field.get("name").asText();
                        if (name.equals(fieldName)) {
                            return indexName;
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * Searches for a field by any property (name, faName, type)
     * @param jsonString The JSON string to search in
     * @param propertyName The property to search in (e.g., "name", "faName", "type")
     * @param value The value to search for
     * @return The index name if found, null otherwise
     */
    public String findIndexByFieldProperty(String jsonString, String propertyName, String value) {
        try {
            JsonNode root = objectMapper.readTree(jsonString);
            JsonNode source = root.get("source");
            
            if (source == null) return null;
            
            Iterator<String> indexNames = source.fieldNames();
            while (indexNames.hasNext()) {
                String indexName = indexNames.next();
                JsonNode indexData = source.get(indexName);
                JsonNode fields = indexData.get("fields");
                
                if (fields != null && fields.isArray()) {
                    for (JsonNode field : fields) {
                        JsonNode propertyNode = field.get(propertyName);
                        if (propertyNode != null && propertyNode.asText().equals(value)) {
                            return indexName;
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }



